[{"/Users/iamsuttichai/Desktop/workspace/roulete/src/App.js":"1","/Users/iamsuttichai/Desktop/workspace/roulete/src/index.js":"2","/Users/iamsuttichai/Desktop/workspace/roulete/src/reportWebVitals.js":"3","/Users/iamsuttichai/Desktop/workspace/roulete/src/component/pad_bet/index.js":"4","/Users/iamsuttichai/Desktop/workspace/roulete/src/component/player_bet/index.js":"5","/Users/iamsuttichai/Desktop/workspace/roulete/src/component/history_bet/index.js":"6","/Users/iamsuttichai/Desktop/workspace/roulete/src/component/result_bet/index.js":"7"},{"size":1549,"mtime":1607946660008,"results":"8","hashOfConfig":"9"},{"size":500,"mtime":1606837605234,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606750019639,"results":"11","hashOfConfig":"9"},{"size":26384,"mtime":1608024258755,"results":"12","hashOfConfig":"9"},{"size":794,"mtime":1607946496016,"results":"13","hashOfConfig":"9"},{"size":12697,"mtime":1608026748661,"results":"14","hashOfConfig":"9"},{"size":847,"mtime":1607946489952,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"fcosbr",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/iamsuttichai/Desktop/workspace/roulete/src/App.js",["32"],"/Users/iamsuttichai/Desktop/workspace/roulete/src/index.js",[],["33","34"],"/Users/iamsuttichai/Desktop/workspace/roulete/src/reportWebVitals.js",[],"/Users/iamsuttichai/Desktop/workspace/roulete/src/component/pad_bet/index.js",["35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75"],"/Users/iamsuttichai/Desktop/workspace/roulete/src/component/player_bet/index.js",["76","77"],"/Users/iamsuttichai/Desktop/workspace/roulete/src/component/history_bet/index.js",["78","79","80"],"import React, { useState } from 'react'\n\nconst HistoryBet = ({ resultBet, clearBet }) => {\n\n    const [resultData, setResultData] = useState([])\n    const [statusBtn, setStatusBtn] = useState(true)\n    const [history, setHistory] = useState([])\n    const [historyData, setHistoryData] = useState([])\n\n    const random = () => {\n\n        //@ straight bet\n        let numCount = 36;\n        let straightValue = Math.floor((Math.random() * numCount) + 1);\n        const arrStraight = {\n            type: \"STRAIGHTUP\",\n            value: straightValue.toString(),\n        }\n        resultData.push(arrStraight)\n        historyData.splice(0,0,straightValue)\n        // historyData.push(straightValue)\n        //@ end straight bet\n        //@ half bet\n        let halfCount = 2;\n        let halfRedBlackValue = Math.floor((Math.random() * halfCount) + 1);\n        let halfHighLowValue = Math.floor((Math.random() * halfCount) + 1);\n        let halfOodEvenValue = Math.floor((Math.random() * halfCount) + 1);\n\n        const arrRedBlack = {\n            type: \"HALF\",\n            value: halfRedBlackValue === 1 ? \"RED\" : \"BLACK\",\n        }\n        const arrHighLow = {\n            type: \"HALF\",\n            value: halfHighLowValue === 1 ? \"HIGH\" : \"SMALL\",\n        }\n        const arrOodEven = {\n            type: \"HALF\",\n            value: halfOodEvenValue === 1 ? \"OOD\" : \"EVEN\",\n        }\n        resultData.push(arrStraight,arrRedBlack,arrHighLow,arrOodEven)\n        //@ end half bet\n        //@ colume bet\n        let index2 = 2\n        let index3 = 1\n        for (let index1 = 3; index1 <= 36; index1++) {\n            if (index1 % 3 === 0) {\n                if (index1 === straightValue) {\n                    const arrColume = {\n                        type: \"COLUME\",\n                        value: \"3rd\",\n                    }\n                    resultData.push(arrColume)\n                }\n            }\n        }\n        while (index2 <= 35) {\n            if (index2 === straightValue) {\n                const arrColume = {\n                    type: \"COLUME\",\n                    value: \"2nd\",\n                }\n                resultData.push(arrColume)\n            }\n            index2 = index2 + 3\n        }\n        while (index3 <= 34) {\n            if (index3 === straightValue) {\n                const arrColume = {\n                    type: \"COLUME\",\n                    value: \"1st\",\n                }\n                resultData.push(arrColume)\n            }\n            index3 = index3 + 3\n        }\n        //@ end colume bet\n        //@ dozen bet\n        let index4 = 1\n        let index5 = 13\n        let index6 = 25\n        while (index4 <= 12) {\n            if (index4 === straightValue) {\n                const arrDozen = {\n                    type: \"DOZEN\",\n                    value: \"1st\",\n                }\n                resultData.push(arrDozen)\n            }\n            index4 = index4 + 1\n        }\n        while (index5 <= 24) {\n            if (index5 === straightValue) {\n                const arrDozen = {\n                    type: \"DOZEN\",\n                    value: \"2nd\",\n                }\n                resultData.push(arrDozen)\n            }\n            index5 = index5 + 1\n        }\n        while (index6 <= 36) {\n            if (index6 === straightValue) {\n                const arrDozen = {\n                    type: \"DOZEN\",\n                    value: \"3rd\",\n                }\n                resultData.push(arrDozen)\n            }\n            index6 = index6 + 1\n        }\n        //@ end dozen bet \n        //@ split bet\n        let splitCount = 2;\n        let splitValueCheck = Math.floor((Math.random() * splitCount) + 1);\n        let splitValue1 = Math.floor((Math.random() * 11) + 1);\n        let splitValue2 = Math.floor((Math.random() * 11) + 1);\n        let splitValue3 = Math.floor((Math.random() * 11) + 1);\n        let groupTopArr = [\"3\", \"6\", \"9\", \"12\", \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\"];\n        let groupMiddleArr = [\"2\", \"5\", \"8\", \"11\", \"14\", \"17\", \"20\", \"23\", \"26\", \"29\", \"32\", \"35\"];\n        let groupBottomArr = [\"1\", \"4\", \"7\", \"10\", \"13\", \"16\", \"19\", \"22\", \"25\", \"28\", \"31\", \"34\"];\n        let data1 = null\n        let data2 = null\n        let data3 = null\n\n        if (groupTopArr[splitValue1] === \"36\") {\n            let splitValueCheck = Math.floor((Math.random() * 2) + 1);\n            data1 = splitValueCheck === 1 ? parseInt(groupTopArr[splitValue1]) - 3 : parseInt(groupTopArr[splitValue1]) - 1\n        } else {\n            let splitValueCheck = Math.floor((Math.random() * 2) + 1);\n            data1 = splitValueCheck === 1 ? parseInt(groupTopArr[splitValue1]) + 3 : parseInt(groupTopArr[splitValue1]) - 1\n        }\n\n        if (groupMiddleArr[splitValue2] === \"2\") {\n            let splitValueCheck = Math.floor((Math.random() * 3) + 1);\n            if (splitValueCheck === 1) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) + 3\n            } else if (splitValueCheck === 2) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) + 1\n            } else {\n                data2 = parseInt(groupMiddleArr[splitValue2]) - 1\n            }\n        } else if (groupMiddleArr[splitValue2] === \"35\") {\n            let splitValueCheck = Math.floor((Math.random() * 3) + 1);\n            if (splitValueCheck === 1) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) + 1\n            } else if (splitValueCheck === 2) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) - 1\n            } else {\n                data2 = parseInt(groupMiddleArr[splitValue2]) - 3\n            }\n            data2 = splitValueCheck === 1 ? parseInt(groupMiddleArr[splitValue2]) + 3 : parseInt(groupMiddleArr[splitValue2]) + 1\n        } else {\n            let splitValueCheck = Math.floor((Math.random() * 4) + 1);\n            if (splitValueCheck === 1) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) + 3\n            } else if (splitValueCheck === 2) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) - 3\n            } else if (splitValueCheck === 3) {\n                data2 = parseInt(groupMiddleArr[splitValue2]) + 1\n            } else {\n                data2 = parseInt(groupMiddleArr[splitValue2]) - 1\n            }\n        }\n\n        if (groupBottomArr[splitValue3] === \"34\") {\n            let splitValueCheck = Math.floor((Math.random() * 2) + 1);\n            data3 = splitValueCheck === 1 ? parseInt(groupBottomArr[splitValue3]) - 3 : parseInt(groupBottomArr[splitValue3]) - 1\n        } else {\n            let splitValueCheck = Math.floor((Math.random() * 2) + 1);\n            data3 = splitValueCheck === 1 ? parseInt(groupBottomArr[splitValue3]) + 3 : parseInt(groupBottomArr[splitValue3]) + 1\n        }\n\n        const arrSplit1 = {\n            type: \"SPLIT\",\n            value: groupTopArr[splitValue1] > data1 ? (data1 + \"-\" + groupTopArr[splitValue1]).toString() : (groupTopArr[splitValue1] + \"-\" + data1).toString(),\n        }\n        const arrSplit2 = {\n            type: \"SPLIT\",\n            value: groupMiddleArr[splitValue2] > data2 ? (data2 + \"-\" + groupMiddleArr[splitValue2]).toString() : (groupMiddleArr[splitValue2] + \"-\" + data2).toString(),\n        }\n        const arrSplit3 = {\n            type: \"SPLIT\",\n            value: groupBottomArr[splitValue3] > data3 ? (data3 + \"-\" + groupBottomArr[splitValue3]).toString() : (groupBottomArr[splitValue3] + \"-\" + data3).toString(),\n        }\n        resultData.push(arrSplit1, arrSplit2, arrSplit3)\n        //@ end split bet\n        //@ street bet\n        let groupCount = 11;\n        let streetValue1 = Math.floor((Math.random() * groupCount) + 1);\n        let streetValue2 = Math.floor((Math.random() * groupCount) + 1);\n        const arrStreet1 = {\n            type: \"STREET\",\n            value: (groupBottomArr[streetValue1] + \"-\" + (parseInt(groupBottomArr[streetValue1]) + 1) + \"-\" + (parseInt(groupBottomArr[streetValue1]) + 2)).toString(),\n        }\n        const arrStreet2 = {\n            type: \"STREET\",\n            value: (groupBottomArr[streetValue2] + \"-\" + (parseInt(groupBottomArr[streetValue2]) + 1) + \"-\" + (parseInt(groupBottomArr[streetValue2]) + 2)).toString(),\n        }\n        resultData.push(arrStreet1,arrStreet2)\n        //@ end street bet\n        //@ square bet\n        let groupSquareArr = [\"5\", \"11\", \"17\", \"23\", \"29\", \"32\"];\n        let squareCount = Math.floor((Math.random() * 5) + 1);\n        let squareCheck = Math.floor((Math.random() * 4) + 1);\n        let dataSquare = null\n        if (squareCheck === 1) {\n            dataSquare = ((parseInt(groupSquareArr[squareCount]) - 4) + \"-\" + (parseInt(groupSquareArr[squareCount]) - 3) + \"-\" + (parseInt(groupSquareArr[squareCount]) - 1) + \"-\" + parseInt(groupSquareArr[squareCount])).toString()\n        } else if (squareCheck === 2) {\n            dataSquare = ((parseInt(groupSquareArr[squareCount]) - 3) + \"-\" + (parseInt(groupSquareArr[squareCount]) - 2) + \"-\" + parseInt(groupSquareArr[squareCount]) + \"-\" + (parseInt(groupSquareArr[squareCount]) + 1)).toString()\n        } else if (squareCheck === 3) {\n            dataSquare = ((parseInt(groupSquareArr[squareCount]) - 1) + \"-\" + parseInt(groupSquareArr[squareCount]) + \"-\" + (parseInt(groupSquareArr[squareCount]) + 2) + \"-\" + (parseInt(groupSquareArr[squareCount]) + 3)).toString()\n        } else {\n            dataSquare = (parseInt(groupSquareArr[squareCount]) + \"-\" + (parseInt(groupSquareArr[squareCount]) + 1) + \"-\" + (parseInt(groupSquareArr[squareCount]) + 3) + \"-\" + (parseInt(groupSquareArr[squareCount]) + 4)).toString()\n        }\n        const arrSquare = {\n            type: \"SQUARE\",\n            value: dataSquare,\n        }\n        resultData.push(arrSquare)\n        //@ end square bet\n        //@ line bet\n        let lineCount = Math.floor((Math.random() * 8) + 1);\n        let groupLineArr = [\"1\", \"4\", \"7\", \"13\", \"16\", \"19\", \"25\", \"28\", \"31\"];\n        const arrLine = {\n            type: \"LINE\",\n            value: (parseInt(groupLineArr[lineCount]) + \"-\" + (parseInt(groupLineArr[lineCount]) + 1) + \"-\" + (parseInt(groupLineArr[lineCount]) + 2) + \"-\" + (parseInt(groupLineArr[lineCount]) + 3) + \"-\" + (parseInt(groupLineArr[lineCount]) + 4) + \"-\" + (parseInt(groupLineArr[lineCount]) + 5)).toString(),\n        }\n        resultData.push(arrLine)\n        //@ end line bet\n        //@ basket bet\n        let basketCount = Math.floor((Math.random() * 2) + 1);\n        const arrBasket = {\n            type: \"BASKET\",\n            value: (0 + \"-\" + parseInt(basketCount) + \"-\" + (parseInt(basketCount) + 1)).toString()\n        }\n        resultData.push(arrBasket)\n        //@ end basket bet\n\n        let mockDataHistory = []\n        historyData.map(item => {\n            const data = {\n                value: item,\n                class: item === 1 || item === 3 || item === 5 || item === 7 || item === 9 || item === 12 || item === 14 || item === 16 || item === 18\n                    || item === 19 || item === 21 || item === 23 || item === 25 || item === 27 || item === 30 || item === 32 || item === 34 || item === 36 ?\n                    \"bg-red-900 border-2 border-red-800\" : \"bg-gray-800 border-2 border-gray-700\"\n            }\n            mockDataHistory.push(data)\n        })\n        resultBet(resultData, true)\n        setHistory(mockDataHistory)\n        setStatusBtn(false)\n    }\n\n    const clear = () => {\n        setStatusBtn(true)\n        setResultData([])\n        clearBet()\n    }\n\n    return (<>\n        <div className=\"bg-gray-800 shadow-lg w-full inline-block rounded\">\n            <div className=\"grid grid-cols-6\">\n                <div className=\"col-span-5 flex items-center px-3 w-full overflow-x-scroll\">\n                    {history.map((item, i) =>\n                        <div className={\"border-2 text-white h-6 mr-1 px-5 w-10 h-10 rounded-lg flex justify-center items-center text-xs \" + item.class} key={i}>\n                            {item.value}\n                        </div>\n                    )}\n                </div>\n                <div className=\"flex justify-end\">\n                    <button className=\"py-2 px-7 text-white m-3 w-32 rounded-full bg-blue-600 sm:text-xs lg:text-base\" hidden={statusBtn === true ? false : true} onClick={() => { random() }}>\n                        หมุนรางวัล\n                    </button>\n                    <button className=\"py-2 px-7 text-white m-3 w-32 rounded-full bg-red-700 sm:text-xs lg:text-base\" hidden={statusBtn === true ? true : false} onClick={() => { clear() }}>\n                        เริ่มใหม่\n                    </button>\n                </div>\n            </div>\n        </div>\n    </>)\n}\n\nexport default HistoryBet","/Users/iamsuttichai/Desktop/workspace/roulete/src/component/result_bet/index.js",["81","82"],{"ruleId":"83","severity":1,"message":"84","line":1,"column":8,"nodeType":"85","messageId":"86","endLine":1,"endColumn":12},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":28,"column":8,"nodeType":"93","endLine":28,"endColumn":21,"suggestions":"94"},{"ruleId":"83","severity":1,"message":"95","line":31,"column":23,"nodeType":"85","messageId":"86","endLine":31,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":114,"column":80,"nodeType":"98","messageId":"99","endLine":114,"endColumn":82},{"ruleId":"96","severity":1,"message":"97","line":117,"column":83,"nodeType":"98","messageId":"99","endLine":117,"endColumn":85},{"ruleId":"96","severity":1,"message":"97","line":128,"column":96,"nodeType":"98","messageId":"99","endLine":128,"endColumn":98},{"ruleId":"96","severity":1,"message":"97","line":131,"column":99,"nodeType":"98","messageId":"99","endLine":131,"endColumn":101},{"ruleId":"96","severity":1,"message":"97","line":134,"column":99,"nodeType":"98","messageId":"99","endLine":134,"endColumn":101},{"ruleId":"96","severity":1,"message":"97","line":138,"column":84,"nodeType":"98","messageId":"99","endLine":138,"endColumn":86},{"ruleId":"96","severity":1,"message":"97","line":141,"column":87,"nodeType":"98","messageId":"99","endLine":141,"endColumn":89},{"ruleId":"96","severity":1,"message":"97","line":144,"column":87,"nodeType":"98","messageId":"99","endLine":144,"endColumn":89},{"ruleId":"96","severity":1,"message":"97","line":147,"column":84,"nodeType":"98","messageId":"99","endLine":147,"endColumn":86},{"ruleId":"96","severity":1,"message":"97","line":150,"column":87,"nodeType":"98","messageId":"99","endLine":150,"endColumn":89},{"ruleId":"96","severity":1,"message":"97","line":154,"column":84,"nodeType":"98","messageId":"99","endLine":154,"endColumn":86},{"ruleId":"96","severity":1,"message":"97","line":157,"column":87,"nodeType":"98","messageId":"99","endLine":157,"endColumn":89},{"ruleId":"96","severity":1,"message":"97","line":161,"column":87,"nodeType":"98","messageId":"99","endLine":161,"endColumn":89},{"ruleId":"96","severity":1,"message":"97","line":165,"column":85,"nodeType":"98","messageId":"99","endLine":165,"endColumn":87},{"ruleId":"100","severity":1,"message":"101","line":243,"column":234,"nodeType":"102","endLine":243,"endColumn":242},{"ruleId":"103","severity":1,"message":"104","line":256,"column":45,"nodeType":"105","endLine":256,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":262,"column":45,"nodeType":"105","endLine":262,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":272,"column":45,"nodeType":"105","endLine":272,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":278,"column":45,"nodeType":"105","endLine":278,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":292,"column":45,"nodeType":"105","endLine":292,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":298,"column":45,"nodeType":"105","endLine":298,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":308,"column":45,"nodeType":"105","endLine":308,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":314,"column":45,"nodeType":"105","endLine":314,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":328,"column":45,"nodeType":"105","endLine":328,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":334,"column":45,"nodeType":"105","endLine":334,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":344,"column":45,"nodeType":"105","endLine":344,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":350,"column":45,"nodeType":"105","endLine":350,"endColumn":63},{"ruleId":"103","severity":1,"message":"104","line":365,"column":33,"nodeType":"105","endLine":365,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":371,"column":33,"nodeType":"105","endLine":371,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":377,"column":33,"nodeType":"105","endLine":377,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":386,"column":33,"nodeType":"105","endLine":386,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":391,"column":33,"nodeType":"105","endLine":391,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":396,"column":33,"nodeType":"105","endLine":396,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":401,"column":33,"nodeType":"105","endLine":401,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":406,"column":33,"nodeType":"105","endLine":406,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":411,"column":33,"nodeType":"105","endLine":411,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":422,"column":33,"nodeType":"105","endLine":422,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":427,"column":33,"nodeType":"105","endLine":427,"endColumn":78},{"ruleId":"103","severity":1,"message":"104","line":432,"column":33,"nodeType":"105","endLine":432,"endColumn":78},{"ruleId":"96","severity":1,"message":"97","line":5,"column":25,"nodeType":"98","messageId":"99","endLine":5,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":6,"column":106,"nodeType":"98","messageId":"99","endLine":6,"endColumn":108},{"ruleId":"83","severity":1,"message":"106","line":8,"column":25,"nodeType":"85","messageId":"86","endLine":8,"endColumn":39},{"ruleId":"83","severity":1,"message":"107","line":115,"column":13,"nodeType":"85","messageId":"86","endLine":115,"endColumn":28},{"ruleId":"96","severity":1,"message":"97","line":241,"column":30,"nodeType":"98","messageId":"99","endLine":241,"endColumn":32},{"ruleId":"96","severity":1,"message":"97","line":5,"column":25,"nodeType":"98","messageId":"99","endLine":5,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":8,"column":106,"nodeType":"98","messageId":"99","endLine":8,"endColumn":108},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'outBet'. Either include it or remove the dependency array. You can also do a functional update 'setOutBet(o => ...)' if you only need 'outBet' in the 'setOutBet' call.","ArrayExpression",["110"],"'setStatusBtn' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setHistoryData' is assigned a value but never used.","'splitValueCheck' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [outBet, statusClear]",{"range":"113","text":"114"},[744,757],"[outBet, statusClear]"]